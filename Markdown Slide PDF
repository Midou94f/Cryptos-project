---
title: "CryptoWise Copilote"
author: "Mehdi FEHRI - Valentin Lagarde - Emile Zeller"
date: "2025-01-13"
output: 
  beamer_presentation:
    keep_tex: true
    latex_engine: xelatex
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

```{r}
library(tinytex)


```


# Introduction 

Nous allons vous pr√©senter **CryptoWise Copilote**, une application √©ducative et analytique d√©di√©e au march√© des cryptomonnaies. Notre objectif √©tait de cr√©er une plateforme qui s'adapte au niveau de chaque utilisateur, combinant apprentissage et outils d'analyse avanc√©s sur le march√© des cryptos. 


# Partie 1 : Pr√©sentation Fonctionnelle
Notre application est structur√©e en trois √©tapes principales :

1. **SmartProfile** : cr√©ation du profil investisseur

2. Syst√®me d'√©valuaiton unique *(des questionnaires bas√©es sur les connaissances financi√®res et cryptos des users)*

3. Les fonctionalit√©s principales *(CryptoAcademy, Cryptonews, P√©pitesHunter, Marketscope...)*


# **I. Cr√©ation du Profil Investisseur**

- Questionnaire d√©taill√© sur la situation financi√®re du user

- √âvaluation de sa tol√©rance au risque

- D√©finition de ses objectifs d'investissement



# **II.Syst√®me d'√âvaluation Unique**

- Auto-√©valuation des ses connaissances

- 2 Test de comp√©tences de type QCM : *en cryptomonnaies et en finance bas√©s sur 2 banques de questions que nous avont construit et qui inclus + 250 questions tir√©es al√©atoirement*

- Restitution finale d'un ***'Animal type'*** et d'un ***'Animal Score'*** qui d√©termine l'acc√®s aux fonctionnalit√©s (Pro ou Lite)

# Extrait de la Matrice des 27 profils types *("animal type")*

\begin{figure}
    \centering
    \includegraphics[width=\textwidth]{/Users/mehdifehri/Desktop/Technique de programmation/Data work/Animal Type.png}
    \caption{Animal Type}
\end{figure}


# Matrice des scores obtenus *("animal score")*

\begin{figure}
    \centering
    \includegraphics[width=\textwidth]{/Users/mehdifehri/Desktop/Technique de programmation/Data work/Animal Score.png}
    \caption{Animal Score}
\end{figure}

# **III.Les Fonctionnalit√©s Principales**

**Crypto Academy** : 

Notre module √©ducatif comprend 10 chapitres qui englobe tous les aspects des cryptomonnaies, en passant de l'histoire du Bitcoin aux derni√®res innovations comme la DeFi

*Le user peut naviguer librement dans le livre interatif et s'il le souhaite, passer un nouveau test de connaissance* 


# **III.Les Fonctionnalit√©s Principales**
 **P√©pitesHunter** : Notre outil d'analyse unique qui mesure les tendances sur les r√©seaux sociaux et qui combine des donn√©es de march√© et sentiment des investisseurs

**1. Signal prix**
 
 - Identifier les cryptomonnaies ayant connu les plus fortes hausses ou baisses  sur 24 heures
 - Fournir une vue d‚Äôensemble rapide des signaux de march√©

**2. Volume de trading et liquidit√©**  

 - Montre l'activit√© des traders sur un actif
 - √âvalue la liquidit√© des cryptomonnaies

**3. Statistiques Sociales**

 - Analyse du Sentiment Communautaire        

# **III.Les Fonctionnalit√©s Principales**

**4. Analyse des Tendances et Recherche Populaire**

 - Identifier les projets les plus populaires 
 - obtenir des informations d√©taill√©es sur les projets
 - Mesure de la Popularit√© des NFT et des Cryptos les plus recherch√©s sur Coin Gecko

**5. Google Trend**

 - Sur la base d'un horizon temporel choisit, pr√©sentation des top cryptos les plus recherch√©es sur le web au niveau mondial

# **III.Les Fonctionnalit√©s Principales**
**CryptoNews** : Agr√©gateur d'actualit√©s en temps r√©el

 - Extraction des 25 derni√®res d√©p√™ches d'actualit√©s li√©es au monde des cryptomonnaies

# **III.Les Fonctionnalit√©s Principales**

 **MarketScope** : Palette d'outils d'analyse technique et graphique

- **BitcoinPulse :** Analyse approfondie du Bitcoin *(Crypto de r√©f√©rence)*
- **AltcoinTracker :**  Affiche les dominances du march√© des altcoins vs. bitcoin
- **CryptoFocus :** Analyse d√©taill√©e d'une crypto choisie
- **Market View :** Vue d'ensemble des 100 premi√®res cryptos en terme de capitalisation
- **Fear & Greed Index :** Indicateur sur l'√©tat psychologique du march√©
- **Trend Scanner :** D√©tection des tendances √©mergente
- **Volume Anomaly :** D√©tection des anomalies de volume


#

*"Un aspect unique de notre application est son syst√®me de progression. Les utilisateurs commencent avec la* **version Lite***, focalis√©e sur l'apprentissage, et peuvent progresser vers la* **version Pro** *en d√©montrant leurs connaissances."*

# Les points forts de notre application sont :

- Une approche √©ducative progressive
- Un syst√®me de progression gamifi√© unique
- Des outils d'analyse professionnels
- Une interface intuitive et personnalis√©e
- Une int√©gration de donn√©es en temps r√©el

# 

## Immersion dans notre application 

# Partie 2: Aspects Techniques

- **7736** lignes de code
- Plus de **35 fonctions principales**, chacune ayant un r√¥le sp√©cifique dans le fonctionnement de l'application. Ces fonctions sont organis√©es de mani√®re modulaire, permettant une maintenance et une √©volution faciles du code.

Les fonctions sont r√©parties en diff√©rentes cat√©gories selon leur utilit√© :

- Fonctions structurelles de l'application
- Fonctions d'interface utilisateur
- Fonctions d'analyse et de traitement des donn√©es
- Fonctions d'affichage et de formatage
- Fonctions de connexion API
- Fonctions √©ducatives et d'√©valuation

# 

## Voici quelques exemples

# 1. Une architechture modulaire

```R
main <- function() {
  result1 <- start_app1()  # Profil initial
  if (!is.null(result1)) {
    result2 <- start_app2()  # √âvaluation
    if (!is.null(result2)) {
      start_app3()  # Interface principale
    }
  }
}
```

Cette structure garantit une progression logique et s√©curis√©e de l'utilisateur.


# 2. Syst√®me de Scoring Sophistiqu√©

```R
determine_animal_score <- function(capacite, connaissance, risque) {
  # Conversion des crit√®res en points
  capacite_points <- ifelse(capacite == "√âlev√©", 6, 
                           ifelse(capacite == "Moyen", 3, 1))
  connaissance_points <- ifelse(connaissance == "√âlev√©", 6, 
                               ifelse(connaissance == "Moyen", 3, 1))
  risque_points <- ifelse(risque == "Moyen", 6, 
                         ifelse(risque == "√âlev√©", 3, 1))
  
  # Score total d√©termine l'acc√®s aux fonctionnalit√©s
  return(capacite_points + connaissance_points + risque_points)
}
```

Ce syst√®me permet une √©valuation √©quilibr√©e des comp√©tences et de la situation de l'utilisateur.

# 3. Int√©gration API et Donn√©es en Temps R√©el

```R
get_coingecko_data <- function(endpoint, params = list()) {
  base_url <- "https://api.coingecko.com/api/v3"
  url <- paste0(base_url, endpoint)
  response <- GET(url, query = params)
  
  if (status_code(response) == 200) {
    return(fromJSON(rawToChar(response$content)))
  }
}
```

Cette fonction est au c≈ìur de nos outils d'analyse, permettant des donn√©es de march√© en temps r√©el.

# 4. Interface Utilisateur R√©active

```R
menu_principal <- function(user_info, profil_recap, user_index) {
  repeat {
    options <- c(
      "Naviguer sur Crypto Academy",
      "Tester vos connaissances",
      "P√©pitesHunter (PRO)",
      "CryptoNews (PRO)",
      "MarketScope (PRO)"
    )
    # Contr√¥le d'acc√®s bas√© sur l'Animal Score
    if (user_info$animal_score >= 13) {
      # Acc√®s complet aux fonctionnalit√©s PRO
    }
  }
}
```
Des menus d'options d√©roulant qui permettent une meilleure navigation pour le user

# 5. Les cheats-codes

```R 

if (choix == "musk") {
    profil_recap <- mettre_a_jour_profil(profil_recap, user_index, 18)
    cat(success_style("\n‚ú® Comme le roi des cryptotechs, tu as d√©bloqu√© toutes les fonctionnalit√©s PRO ! üöÄ\n"))
} else if (choix == "zemmour") {
    profil_recap <- mettre_a_jour_profil(profil_recap, user_index, 3)
    cat(error_style("\nüíÄ Vous venez d'invoquer Gargamelle...\n"))
}
```
Un aspect ludique qui nous a permis tout de m√™me d'avancer plus rapidement dans le d√©veloppement du code.

# 6. Le Syst√®me de Style Visuel

```R
question_style <- blue$bold
info_style <- white$italic
warning_style <- red$bold
success_style <- green$bold
highlight_style <- yellow$bold
```
L'interface utilisateur est tr√®s travaill√©e avec un syst√®me de couleurs coh√©rent.



# 7. Gestion Interactive des Erreurs

```R
tryCatch({
    response <- GET(url, query = params)
    if (status_code(response) == 429) {
        cat(warning_style("\nLimite d'API atteinte. Pause de 60 secondes...\n"))
        Sys.sleep(61)
        return(get_coingecko_data(endpoint, params))
    }
})
```
La gestion des erreurs d'API avec retry automatique est sophistiqu√©e.



# 8. Syst√®me de Progression Dynamique
```R
if (user_info$animal_score < 8) {
    if (note == 10) {
        cat(success_style("\nExtraordinaire! Version PRO d√©bloqu√©e!\n"))
        profil_recap <- mettre_a_jour_profil(profil_recap, user_index, user_info$animal_score + 10)
    }
}
```
Le syst√®me de progression est bien pens√© avec des seuils et r√©compenses.

# Conclusion 

Merci pour votre attention !

Nous vous invitons √† explorer et √† vous amuser avec notre code pour d√©couvrir toutes les fonctionnalit√©s de **Cryptowise Copilote**.

### Perspectives d‚Äôavenir :
- **D√©veloppement de l'application en Shiny** : pour offrir une interface interactive et accessible √† tous.
- **Commercialisation sur l'App Store?** 

Explorez, testez et rejoignez-nous dans cette aventure innovante autour des cryptomonnaies. üöÄ


---

## *CryptoWise Copilote est prot√©g√© par le droit d'auteur. Toute reproduction ou utilisation sans autorisation pr√©alable est strictement interdite.*

---







